entities: [
      {
          name: "Bronze Event Stream Types v2 teeeeeest"
          sources: [
                {
                    topic = "production.pub.raw.rds.factorial.event_store_events"
                    kafkaSecret = "production/kafka_credentials"
                    name = "event_store_events"
                    format = "kafka"
                    ops = [
                        {
                            op: "expr"
                            expressions = ["timestamp(from_unixtime(get_json_object(value, '$.payload.source.ts_ms')/1000,'yyyy-MM-dd HH:mm:ss')) as metadata_updated_at", "timestamp_millis(cast(get_json_object(value, '$.payload.ts_ms') as long)) as ts_ms", "get_json_object(value, '$.payload.after')  as after", "timestamp_millis(cast(get_json_object(value, '$.payload.after.created_at') as long)) as created_at"]
                        },
                        {
                            op: "watermark"
                            onColumn = "created_at"
                            value = "10 seconds"
                        }
                    ]
                },
                {
                    topic = "production.pub.raw.rds.factorial.event_store_events_in_streams"
                    kafkaSecret = "production/kafka_credentials"
                    name = "event_store_events_stream"
                    format = "kafka"
                    ops = [
                        {
                            op: "expr"
                            expressions = ["timestamp(from_unixtime(get_json_object(value, '$.payload.source.ts_ms')/1000,'yyyy-MM-dd HH:mm:ss')) as metadata_updated_at", "timestamp_millis(cast(get_json_object(value, '$.payload.ts_ms') as long)) as ts_ms", "get_json_object(value, '$.payload.after')  as after", "timestamp_millis(cast(get_json_object(value, '$.payload.after.created_at') as long)) as created_at"]
                        },
                        {
                            op: "watermark"
                            onColumn = "created_at"
                            value = "10 seconds"
                        }
                    ]
                }
          ]
          mapping {
              #file = "s3a://factorial-metabolic/data-lake-confs/dev/feature_delta/mappings/events/event_types_stream.sql"
              sql = "select * from event_store_events"
          }
          sink {
              outputPath = "s3a://factorial-metabolic/data-lake/dev/feature_delta/dl-bronze/stream_event_type_v9/"
              writeMode = "append"
              ops: [
              {
					op: date_partition
					eventDtColumn = "metadata_updated_at"
			  }
			  ]
              format = "DELTA"
          }
    }
]